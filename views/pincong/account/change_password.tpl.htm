<?php TPL::include('components/begin.tpl.htm'); ?>

<script src="<?php echo G_STATIC_URL; ?>/js/openpgp.min.js"></script>
<script src="<?php echo G_STATIC_URL; ?>/js/bcrypt.js"></script>
<script src="<?php echo G_STATIC_URL; ?>/js/passwordutil.js?v=<?php echo G_DISPLAY_VERSION_BUILD; ?>"></script>

<main class="d-flex flex-column justify-content-center h-100">
	<div class="text-center mb-4">
		<a href="<?php echo base_url(); ?>/">
			<img class="mb-4" src="<?php echo S::get('login_logo_url'); ?>" alt="">
		</a>
		<div class="mb-3">
			<img style="min-height:6rem;" src="<?php echo UF::avatar($this->user_info, 'max'); ?>" alt="">
		</div>
	</div>

	<form class="w-100 mx-auto px-3 mb-5" style="max-width:21rem;display:none;" id="id_login_form" onsubmit="return false;" method="post">
		<div class="mb-3">
			<input class="form-control" type="text" name="username" autocomplete="username" value="<?php echo $this->user_info['user_name']; ?>" readonly style="cursor:default">
		</div>
		<div class="mb-3">
			<input class="form-control" type="password" name="password" autocomplete="current-password" placeholder="<?php echo _t('当前密码'); ?>">
		</div>
		<div class="mb-3">
			<input class="form-control" type="password" name="new_password" autocomplete="new-password" placeholder="<?php echo _t('新的密码'); ?>">
		</div>
		<div class="mb-3">
			<input class="form-control" type="password" name="confirm_new_password" autocomplete="new-password" placeholder="<?php echo _t('确认新的密码'); ?>">
		</div>
		<div class="custom-control custom-checkbox mb-3">
			<input class="custom-control-input" id="for_remember_me" type="checkbox" name="remember_me">
			<label class="custom-control-label" for="for_remember_me"><?php echo _t('记住我'); ?></label>
		</div>
		<button class="btn btn-primary btn-block" type="submit"><?php echo _t('修改密码'); ?></button>
	</form>

	<div class="text-center">
		<p class="mb-4"></p>
		<p class="text-muted mb-3">&copy; <?php echo date('Y'); ?></p>
	</div>
</main>

<script>
$(document).ready(function () {
	var form = $('#id_login_form').show();
	var btn = form.find('button[type=submit]');

	var _store = function(private_key) {
		localStorage.setItem('<?php echo G_COOKIE_PREFIX; ?>_private_key', private_key);
	}

	var _redirect = function(url) {
		url || (url = '<?php echo url_rewrite(); ?>/');
		window.location = url;
	}

	form.submit(function(e) {
		e.preventDefault();

		var pwd = form.find('input[name=password]').val();
		var new_pwd = form.find('input[name=new_password]').val();
		var confirm_new_pwd = form.find('input[name=confirm_new_password]').val();

		if (!pwd || !new_pwd) {
			AWS.toast("<?php echo _t('请输入正确的密码'); ?>", 'danger');
			return false;
		}
		if (new_pwd != confirm_new_pwd) {
			AWS.toast("<?php echo _t('两次输入的密码不一致'); ?>", 'danger');
			return false;
		}
		if (new_pwd.length < 8) {
			AWS.toast("<?php echo _t('密码长度不能少于8个字符'); ?>", 'danger');
			return false;
		}
		if (/^(.)\1+$/.test(new_pwd)) {
			AWS.toast("<?php echo _t('密码不能是单一的字符'); ?>", 'danger');
			return false;
		}
		if (/^[0-9]+$/.test(new_pwd)) {
			AWS.toast("<?php echo _t('密码不能是纯数字'); ?>", 'danger');
			return false;
		}
		if (/^[a-z]+$/.test(new_pwd)) {
			AWS.toast("<?php echo _t('密码不能是纯小写字母'); ?>", 'danger');
			return false;
		}

		var params = {
			remember_me: form.find('input[name=remember_me]').is(':checked') ? 1 : 0,
			token: '<?php echo $this->token; ?>',
		}

		var client_salt = '<?php echo $this->user_info['salt']; ?>';
		var password_version = (<?php echo intval($this->user_info['password_version']); ?> || 1);

		AWS.toast("<?php echo _t('正在生成公钥和私钥, 请稍候...'); ?>");

		setTimeout(function() {
			var private_key;
			PasswordUtil.password_hash(pwd, client_salt, password_version).then(function(value) {
				params.scrambled_password = value;
				return PasswordUtil.random_string(45);
			}).then(function(value) {
				params.new_client_salt = value;
				return PasswordUtil.password_hash(new_pwd, params.new_client_salt);
			}).then(function(value) {
				params.new_scrambled_password = value;
				return PasswordUtil.generate_key();
			}).then(function(value) {
				params.new_public_key = value[0];
				private_key = value[1];
				return PasswordUtil.password_hash(new_pwd, params.new_public_key);
			}).then(function(value) {
				return PasswordUtil.encrypt_private_key(private_key, value);
			}).then(function(value) {
				params.new_private_key = value;
				AWS.ajax_request('<?php echo url_rewrite(); ?>/account/ajax/change_password/', params, function(rsm) {
					_store(private_key);
					rsm || (rsm = {});
					_redirect(rsm.next);
				}, function(err) {
					AWS.toast(err, 'danger');
					btn.removeClass('disabled');
					$('.aw-register-verify img').click();
				});
			}).catch(function(error) {
				AWS.toast("<?php echo _t('无法生成公钥和私钥'); ?>", 'danger');
				btn.removeClass('disabled');
				console.log(error);
			});
		}, 0);

		return false;
	});
});
</script>

<?php TPL::include('components/end.tpl.htm'); ?>
